CREATE DEFINER=`mlfftpms`@`%` PROCEDURE `mlff_core`.`transaction_cut_off`(IN postedDate date)

BEGIN
    SET SQL_SAFE_UPDATES = 0;

    DELETE FROM rpt_transactions WHERE cut_off_date = postedDate;
    DELETE FROM rpt_transaction_commissions WHERE cut_off_date = postedDate;
    DELETE FROM rpt_transaction_apportionments WHERE cut_off_date = postedDate;

    INSERT INTO rpt_transactions(
    `created_date`,
    `cut_off_date`,
    `transaction_id`,
    `agency_id`,
    `app_id`,
    `buffered_flag`,
    `collector_id`,
    `counter`,
    `ewallet_error_code`,
    `ewallet_error_msg`,
    `entry_data_source`,
    `entry_lane_id`,
    `entry_plaza_id`,
    `entry_sp_id`,
    `entry_timestamp`,
    `error_code_id`,
    `error_description`,
    `exit_lane_id`,
    `exit_plaza_id`,
    `exit_sp_id`,
    `exit_timestamp`,
    `failed_error_rule`,
    `fare`,
    `group_id`,
    `has_apportionment`,
    `has_settlement`,
    `image_captured`,
    `ind_axles_offset`,
    `ind_veh_axles`,
    `ind_veh_class`,
    `is_short_journey`,
    `lane_mode`,
    `lane_serial_num`,
    `post_write_trx_num`,
    `posted_date`,
    `pre_write_trx_num`,
    `processed_timestamp`,
    `read_agency_data`,
    `read_performance`,
    `read_tag_class_rear_tires`,
    `read_tag_class_veh_axles`,
    `read_tag_class_veh_type`,
    `read_tag_class_veh_weight`,
    `received_timestamp`,
    `response_code`,
    `response_description`,
    `response_status`,
    `revenue_type`,
    `serial_num`,
    `si_code`,
    `sp_code`,
    `sp_sent_timestamp`,
    `tag_serial_num`,
    `tc_response_timestamp`,
    `tc_transaction_id`,
    `tp_reason_code`,
    `transaction_status`,
    `transaction_type`,
    `txn_ack_queue`,
    `txn_response_queue`,
    `type`,
    `validation_status`,
    `veh_speed`,
    `vehicle_class`,
    `viol_observed`,
    `wallet_uuid`,
    `write_agency_data`,
    `write_tag_class_rear_tires`,
    `write_tag_class_veh_axles`,
    `write_tag_class_veh_type`,
    `write_tag_class_veh_weight`,
    `t_type_fk`,
    `is_vehicle_class_mismatch`,
    `vehicle_plate_num`,
    `is_tag_inactive`,
    `account_no`,
    `account_type`,
    `account_sub_type`,
    `fare_source`,
    `is_from_vector`,
    `tran_amt`,
    `is_tag_inactive_allowable_range`,
    `wallet_account_no`,
    `is_zero_fare`,
    `vehicle_class_from_vector`,
    `exempt_has_fare`,
    `tc_serial_num`,
    `fare_id`,
    `std_plan_id`,
    `std_plan_description`,
    `vehicle_entitlement`,
    `is_mha_class`,
    `original_amt`,
    `source_of_fund`,
    `sc_spid`,
    `payment_type`,
    `payment_id`,
    `payment_datetime`,
    `advance_payment`,
    `initial_sof`,
    `actual_sof`,
    `source_of_payment`,
    `is_pending_settled`,
    `is_early_settled`,
    `settlement_date`
    ) SELECT
     SYSDATE(),
     posted_Date,
     id,
     agency_id,
     app_id,
     buffered_flag,
     collector_id,
     counter,
     ewallet_error_code,
     ewallet_error_msg,
     entry_data_source,
     entry_lane_id,
     entry_plaza_id,
     entry_sp_id,
     entry_timestamp,
     error_code_id,
     error_description,
     exit_lane_id,
     exit_plaza_id,
     exit_sp_id,
     exit_timestamp,
     failed_error_rule,
     fare,
     group_id,
     has_apportionment,
     has_settlement,
     image_captured,
     ind_axles_offset,
     ind_veh_axles,
     ind_veh_class,
     is_short_journey,
     lane_mode,
     lane_serial_num,
     post_write_trx_num,
     posted_date,
     pre_write_trx_num,
     processed_timestamp,
     read_agency_data,
     read_performance,
     read_tag_class_rear_tires,
     read_tag_class_veh_axles,
     read_tag_class_veh_type,
     read_tag_class_veh_weight,
     received_timestamp,
     response_code,
     response_description,
     response_status,
     revenue_type,
     serial_num,
     si_code,
     sp_code,
     sp_sent_timestamp,
     tag_serial_num,
     tc_response_timestamp,
     tc_transaction_id,
     tp_reason_code,
     transaction_status,
     transaction_type,
     txn_ack_queue,
     txn_response_queue,
     type,
     validation_status,
     veh_speed,
     vehicle_class,
     viol_observed,
     wallet_uuid,
     write_agency_data,
     write_tag_class_rear_tires,
     write_tag_class_veh_axles,
     write_tag_class_veh_type,
     write_tag_class_veh_weight,
     t_type_fk,
     is_vehicle_class_mismatch,
     vehicle_plate_num,
     is_tag_inactive,
     account_no,
     account_type,
     account_sub_type,
     fare_source,
     is_from_vector,
     tran_amt,
     is_tag_inactive_allowable_range,
     wallet_account_no,
     is_zero_fare,
     vehicle_class_from_vector,
     exempt_has_fare,
     tc_serial_num,
     fare_id,
     std_plan_id,
     std_plan_description,
     vehicle_entitlement,
     is_mha_class,
     original_amt,
     source_of_fund,
     sc_spid,
     payment_type,
     payment_id,
     payment_datetime,
     advance_payment,
     initial_sof,
     actual_sof,
     source_of_payment,
     is_pending_settled,
     is_early_settled,
     settlement_date
    FROM tdb_transactions
    WHERE DATE(posted_date) = postedDate
    AND is_from_vector = false
    AND deleted = false;

    INSERT INTO rpt_transaction_commissions(
    `created_date`,
    `cut_off_date`,
    `transaction_commission_id`,
    `fare`,
    `spid`,
    `transaction_id_fk`,
    `commission`,
    `gst`,
    `net`,
    `original_fare`,
    `vehicle_indicator`
    ) SELECT
    sysdate(),
    postedDate,
    tc.id,
    tc.fare,
    tc.spid,
    tc.transaction_id_fk,
    tc.commission,
    tc.gst,
    tc.net,
    tc.original_fare,
    tc.vehicle_indicator
    FROM tdb_transaction_commissions tc
    INNER JOIN tdb_transactions t ON t.id = tc.transaction_id_fk AND t.deleted = false
    WHERE tc.deleted = false AND date(t.posted_date) = postedDate;

    INSERT INTO rpt_transaction_apportionments(
    `created_date`,
    `cut_off_date`,
    `transaction_apportionment_id`,
    `fare`,
    `spid`,
    `transaction_id_fk`,
    `original_fare`,
    `vehicle_indicator`
    )SELECT
    sysdate(),
    postedDate,
    ta.id,
    ta.fare,
    ta.spid,
    ta.transaction_id_fk,
    ta.original_fare,
    ta.vehicle_indicator
    FROM tdb_transaction_apportionments ta
    INNER JOIN tdb_transactions t ON t.id = ta.transaction_id_fk AND t.deleted = false
    WHERE ta.deleted = false AND date(t.posted_date) = postedDate;

    SET SQL_SAFE_UPDATES = 1;
END